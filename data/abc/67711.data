environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\fujiwara\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'MYCOMPUTER', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\fujiwara', 'LOCALAPPDATA': 'C:\\Users\\fujiwara\\AppData\\Local', 'LOGONSERVER': '\\\\MYCOMPUTER', 'NODE_PATH': 'C:\\Program Files (x86)\\Nodist\\bin\\node_modules;C:\\Program Files (x86)\\Nodist\\bin\\node_modules;C:\\Program Files (x86)\\Nodist\\bin\\node_modules;%NODE_PATH%', 'NODIST_PREFIX': 'C:\\Program Files (x86)\\Nodist', 'NODIST_X64': '1', 'NUMBER_OF_PROCESSORS': '12', 'ONEDRIVE': 'C:\\Users\\fujiwara\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Nodist\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Java\\jdk-13.0.2\\bin;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Users\\fujiwara\\Anaconda3;C:\\Users\\fujiwara\\Anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\fujiwara\\Anaconda3\\Library\\usr\\bin;C:\\Users\\fujiwara\\Anaconda3\\Library\\bin;C:\\Users\\fujiwara\\Anaconda3\\Scripts;C:\\Users\\fujiwara\\AppData\\Local\\Microsoft\\WindowsApps;D:\\Microsoft VS Code\\bin;C:\\Users\\fujiwara\\AppData\\Roaming\\npm;C:\\MinGW\\bin;C:\\Users\\fujiwara\\AppData\\Local\\GitHubDesktop\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 158 Stepping 13, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9e0d', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\fujiwara\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\fujiwara\\AppData\\Local\\Temp', 'USERDOMAIN': 'MYCOMPUTER', 'USERDOMAIN_ROAMINGPROFILE': 'MYCOMPUTER', 'USERNAME': 'fujiwara', 'USERPROFILE': 'C:\\Users\\fujiwara', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'WINDIR': 'C:\\Windows', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.43.1', 'LANG': 'ja_JP.UTF-8', 'COLORTERM': 'truecolor'})